// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  loginCount    Int       @default(0)
  
  // Profile fields
  role          String?   @default("Admin")
  department    String?   @default("Administration")
  phone         String?
  location      String?
  timezone      String?
  bio           String?
  skills        String[]  @default([])
  
  // User preferences
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  weeklyReports      Boolean @default(false)
  taskReminders      Boolean @default(true)
  theme              String  @default("light")
  
  accounts Account[]
  sessions Session[]
  loginHistory LoginHistory[]

  @@map("users")
}

model LoginHistory {
  id          String   @id @default(cuid())
  userId      String
  loginAt     DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  provider    String?  // 'google', 'credentials', etc.
  success     Boolean  @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
